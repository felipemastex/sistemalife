'use server';
/**
 * @fileOverview An AI agent that provides personalized advice as the 'System'.
 *
 * - generateSystemAdvice - A function that handles personalized advice generation.
 * - GenerateSystemAdviceInput - The input type for the function.
 * - GenerateSystemAdviceOutput - The return type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateSystemAdviceInputSchema = z.object({
  userName: z.string().describe('The name of the user.'),
  profile: z.string().describe('The user\'s profile data as a JSON string.'),
  metas: z.string().describe('The user\'s goals (metas) as a JSON string.'),
  query: z.string().describe('The user\'s question or directive.'),
});
export type GenerateSystemAdviceInput = z.infer<typeof GenerateSystemAdviceInputSchema>;

const GenerateSystemAdviceOutputSchema = z.object({
  response: z.string().describe('The advice generated by the System AI.'),
});
export type GenerateSystemAdviceOutput = z.infer<typeof GenerateSystemAdviceOutputSchema>;

export async function generateSystemAdvice(
  input: GenerateSystemAdviceInput
): Promise<GenerateSystemAdviceOutput> {
  return generateSystemAdviceFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateSystemAdvicePrompt',
  input: {schema: GenerateSystemAdviceInputSchema},
  output: {schema: GenerateSystemAdviceOutputSchema},
  prompt: `You are the 'System', a real-life RPG AI. The user is {{userName}}.
Their profile: {{profile}}
Their long-term goals (Metas): {{metas}}

User's directive: "{{query}}"

Respond concisely, in character as the System. Be helpful and strategic.`,
});

const generateSystemAdviceFlow = ai.defineFlow(
  {
    name: 'generateSystemAdviceFlow',
    inputSchema: GenerateSystemAdviceInputSchema,
    outputSchema: GenerateSystemAdviceOutputSchema,
  },
  async (input) => {
    const {output} = await prompt(input);
    return { response: output!.response };
  }
);
