'use server';

/**
 * @fileOverview A personalized advice AI agent.
 *
 * - generatePersonalizedAdvice - A function that handles the personalized advice generation process.
 * - GeneratePersonalizedAdviceInput - The input type for the generatePersonalizedAdvice function.
 * - GeneratePersonalizedAdviceOutput - The return type for the generatePersonalizedAdvice function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GeneratePersonalizedAdviceInputSchema = z.object({
  userData: z
    .string()
    .describe(
      'The user data that includes tracked data, goals, and progress information.'
    ),
  query: z.string().describe('The query for which to generate personalized advice.'),
});
export type GeneratePersonalizedAdviceInput = z.infer<
  typeof GeneratePersonalizedAdviceInputSchema
>;

const GeneratePersonalizedAdviceOutputSchema = z.object({
  advice: z.string().describe('The personalized advice generated by the AI.'),
});
export type GeneratePersonalizedAdviceOutput = z.infer<
  typeof GeneratePersonalizedAdviceOutputSchema
>;

export async function generatePersonalizedAdvice(
  input: GeneratePersonalizedAdviceInput
): Promise<GeneratePersonalizedAdviceOutput> {
  return generatePersonalizedAdviceFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generatePersonalizedAdvicePrompt',
  input: {schema: GeneratePersonalizedAdviceInputSchema},
  output: {schema: GeneratePersonalizedAdviceOutputSchema},
  prompt: `You are an AI-powered System Guide that offers personalized advice and suggestions based on the user's tracked data and goals.

  You will receive user data that includes their tracked data, goals, and progress information. Use this information to generate personalized advice and suggestions to help the user improve and overcome challenges.

  Here is the user data:
  {{userData}}

  Here is the query:
  {{query}}
  `,
});

const generatePersonalizedAdviceFlow = ai.defineFlow(
  {
    name: 'generatePersonalizedAdviceFlow',
    inputSchema: GeneratePersonalizedAdviceInputSchema,
    outputSchema: GeneratePersonalizedAdviceOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
